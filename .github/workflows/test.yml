name: Test

on:
  push:
    branches:
      - develop
      - master
      - bt-release
      - gps-release
  pull_request:
    branches:
      - develop
      - master
      - bt-release
      - gps-release

jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - run: node --version

      - name: Cache node_modules/
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-cache-

      - run: yarn --frozen-lockfile

      - run: yarn test
        env:
          CI: true

  unit-test-android:
    needs: unit-test
    runs-on: macOS-latest # macOS-latest is required, tests need HAXM emulator
    steps:
      - uses: actions/checkout@v2

      - name: Cache node_modules/
        uses: actions/cache@v1
        with:
          path: node_modules
          key: ${{ runner.OS }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-cache-
      - run: yarn --frozen-lockfile

      - name: Cache gradle
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: ./gradlew :app:connectedGpsDebugAndroidTest :app:connectedBtDebugAndroidTest --no-daemon
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 28
          script: ./gradlew :app:connectedGpsDebugAndroidTest :app:connectedBtDebugAndroidTest --no-daemon
          working-directory: ./android

  unit-test-ios:
    runs-on: macOS-latest
    needs: unit-test
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@master

      - name: Set XCode Version
        run: sudo xcode-select -s /Applications/Xcode_11.5.app

      - name: Cache node_modules/
        uses: actions/cache@v1
        id: cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-cache-

      - name: Install Node Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Cache ruby gems
        uses: actions/cache@v1
        with:
          path: ios/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems (including Cocoapods)
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
        working-directory: ./ios

      - run: pod install --repo-update
        working-directory: ./ios

      # TODO(https://pathcheck.atlassian.net/browse/SAF-250): remove the skip on COVIDSafePathsTests/testRendersWelcomeScreen once it's passing
      - run: |
          xcodebuild test -workspace COVIDSafePaths.xcworkspace \
            -scheme GPS_Tests \
            -destination 'platform=iOS Simulator,name=iPhone 8' \
            -skip-testing GPSTests/COVIDSafePathsTests/testRendersWelcomeScreen
        working-directory: ./ios

  # separate build job so that multiple test jobs can run on the same artifact
  e2e-ios-build:
    runs-on: macOS-latest
    # while this job doesn't depend on the previous job explicitly
    # this will force them not to run in parallel. If they're run in parallel,
    # the node_modules caches will conflict
    needs: unit-test
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@master

      - name: Set XCode Version
        run: sudo xcode-select -s /Applications/Xcode_11.5.app

      - name: Cache node_modules/
        uses: actions/cache@v1
        id: cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-cache-

      - name: Rebuild detox
        if: steps.cache.outputs.cache-hit == 'true'
        run: yarn detox-setup

      - name: Install Node Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - name: Cache ruby gems
        uses: actions/cache@v1
        with:
          path: ios/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install ruby gems (including Cocoapods)
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
        working-directory: ./ios

      - name: Cache CocoaPods
        uses: actions/cache@v1
        with:
          path: ios/Pods
          key: ${{ runner.OS }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.OS }}-pods-

      - run: bundle exec pod install --repo-update
        working-directory: ./ios

      - run: yarn build:e2e:ios

      - uses: actions/upload-artifact@v1
        with:
          name: e2e-ios-bin
          path: ios/build/Build/Products/Release-iphonesimulator/GPS.app

  e2e-iphone-se:
    runs-on: macOS-latest
    needs: e2e-ios-build
    timeout-minutes: 15
    env:
      DEVELOPER_DIR: /Applications/Xcode_11.5.app
    steps:
      - uses: actions/checkout@master
      - name: Cache node_modules/
        uses: actions/cache@v1
        id: cache
        with:
          path: node_modules
          key: ${{ runner.OS }}-yarn-cache-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.OS }}-yarn-cache-

      - name: Rebuild detox
        if: steps.cache.outputs.cache-hit == 'true'
        run: yarn detox-setup

      - name: Install Node Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: yarn --frozen-lockfile

      - run: brew tap wix/brew

      - run: brew install applesimutils

      # - run: xcrun simctl list devicetypes

      # - run: xcrun simctl list runtimes

      - run: xcrun simctl create "iPhone SE (2nd generation)" com.apple.CoreSimulator.SimDeviceType.iPhone-SE com.apple.CoreSimulator.SimRuntime.iOS-13-5

      - run: xcrun simctl list

      - uses: actions/download-artifact@master
        with:
          name: e2e-ios-bin
          path: ios/build/Build/Products/Release-iphonesimulator/GPS.app

      - run: yarn test:e2e:iphone-se

      - name: Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: iPhone SE screenshots
          path: e2e/artifacts
